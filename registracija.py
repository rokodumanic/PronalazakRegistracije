# -*- coding: utf-8 -*-
"""registracija.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ul2Ds7_LBJQ-fcozjSDCkUs_GKsL5pc
"""

!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
#dodat da Makefile ima GPU i OPENCV ukljucen 
# %cd darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile

#buildati darknet
!make

#instalacija svih ovisnosti
!apt install ffmpeg libopencv-dev libgtk-3-dev python-numpy python3-numpy libdc1394-22 libdc1394-22-dev libjpeg-dev libtiff5-dev libavcodec-dev libavformat-dev libswscale-dev libxine2-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libv4l-dev libtbb-dev qtbase5-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils unzip

# Commented out IPython magic to ensure Python compatibility.
#import dataseta
# %cd /content/darknet
!curl -L "https://app.roboflow.com/ds/1KsOiCPXwR?key=HmxeXhJJjc" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip

# Commented out IPython magic to ensure Python compatibility.
#namjestanje direktorija za trenitanje
# %cd /content/darknet/
# %cp train/_darknet.labels data/obj.names
# %mkdir data/obj
#kopiranje slika i labela
# %cp train/*.jpg data/obj/
# %cp valid/*.jpg data/obj/
# %cp train/*.txt data/obj/
# %cp valid/*.txt data/obj/

with open('data/obj.data', 'w') as out:
  out.write('classes = 1\n')
  out.write('train = data/train.txt\n')
  out.write('valid = data/valid.txt\n')
  out.write('names = data/obj.names\n')
  out.write('backup = backup/')
  #train file(popis slika)
import os

with open('data/train.txt', 'w') as out:
  for img in [f for f in os.listdir('train') if f.endswith('jpg')]:
    out.write('data/obj/' + img + '\n')

#file za validaciju(popis slika)
import os

with open('data/valid.txt', 'w') as out:
  for img in [f for f in os.listdir('valid') if f.endswith('jpg')]:
    out.write('data/obj/' + img + '\n')

#test file(popis slika)
import os

with open('test/test.txt', 'w') as out:
  for img in [f for f in os.listdir('test') if f.endswith('jpg')]:
    out.write('test/' + img + '\n')

#izmjena yolov4-custom.cfg
f = open("/content/darknet/cfg/yolov4-custom.cfg", "r")
popis_linija = f.readlines()
popis_linija[7] = "width=416\n"
popis_linija[8] = "height=416\n"
popis_linija[19] = "max_batches = 6000\n"
popis_linija[21] = "steps=4800,5400\n"
popis_linija[962] = "filters=18\n"
popis_linija[969] = "classes=1\n"
popis_linija[1050] = "filters=18\n"
popis_linija[1057] = "classes=1\n"
popis_linija[1138] = "filters=18\n"
popis_linija[1145] = "classes=1\n"


a_file = open("/content/darknet/cfg/yolov4-custom.cfg", "w")
a_file.writelines(popis_linija)
a_file.close()

# Commented out IPython magic to ensure Python compatibility.
#stvaranje yolov4-custom-test.cfg
# %cp /content/darknet/cfg/yolov4-custom.cfg /content/darknet/cfg/yolov4-custom-test.cfg
f = open("/content/darknet/cfg/yolov4-custom-test.cfg", "r")
popis_linija = f.readlines()
popis_linija[5] = "batch=1\n"
popis_linija[6] = "subdivisions=1\n"

a_file = open("/content/darknet/cfg/yolov4-custom-test.cfg", "w")
a_file.writelines(popis_linija)
a_file.close()

# Commented out IPython magic to ensure Python compatibility.
# define helper functions
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

#preuzet vec istrenirane utege
#!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')
# this creates a symbolic link so that now the path /content/gdrive/My\ Drive/ is equal to /mydrive
!ln -s /content/gdrive/My\ Drive/ /mydrive
!ls /mydrive/registracije
# vrati se u darknet direktorij kako bi pokrenio mre≈æu
# %cd darknet

#treniranje
!./darknet detector train data/obj.data cfg/yolov4-custom.cfg /content/gdrive/MyDrive/registracije/yolov4-custom_1000.weights -dont_show

#spremanje utega na vlastiti google drive
mount it
from google.colab import drive
drive.mount('/content/drive')
# kopiranje na Drive
!cp /content/darknet/backup/* /content/drive/MyDrive

#detekcija (testiranje)
!./darknet detector test data/obj.data /content/darknet/cfg/yolov4-custom-test.cfg /content/gdrive/MyDrive/registracije/yolov4-custom_1000.weights /content/darknet/test/P9180014.rf.3c2835fd24d2e18532fa3009e0c0bd03.jpg -json_port 8070 -mjpeg_port 8090
imShow('predictions.jpg')